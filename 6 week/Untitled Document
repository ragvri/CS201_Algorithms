#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <limits.h>


void tower_of_hanoi(long long int n ,long long int p , long long int **a , long long int ** b)
{
	int i,j,k;
	for (i=1;i<=n;++i)
		{
		    a[3][i]=(long long int)pow(2,i) -1;
		    b[3][i]=i-1;
		}
    //printf("%d",a[3][3]);
    if (p==3)
        return;
   // printf("initialised\n");
	for (i=4;i<=p;++i)
	{
	    //printf("YES\n");
		a[i][1]=1;
		b[i][1]=0;
		a[i][2]=3;
        b[i][2]=1;
	}

	for (i=4;i<=p;++i)
	{
		for (j=3;j<=n;++j)
		{
			a[i][j]=LLONG_MAX;
			for (k=1;k<j;++k)
			{
			   // printf("OK\n");
				if (2*a[i][k] + a[i-1][j-k]<a[i][j])
					{
					    a[i][j]=2*a[i][k] + a[i-1][j-k];
					    b[i][j]=k;
					}
			}
		}
	}
}

void print(long long int n,long long int p, long long int* b, int* peg_array, int * allowed_pegs)
{
    if (n==0)
        return;
    else if (n==1)
    {

    }
}

int main (void)
{
	long long int n,p,i,j;
	printf("Enter the total number of discs\n");
	scanf("%lld",&n);
	printf("Enter the total number of pegs(>=3)\n");
	scanf("%lld",&p);
	long long int ** dp = malloc((p+1)*sizeof(long long int*));
	long long int ** splitter = malloc((p+1)* sizeof( long long int*));
	for (i=0;i<=p;++i)
	{
		dp[i]=malloc((n+1)*sizeof( long long int));
		splitter[i]=malloc((n+1)* sizeof(long long int));
	}
    //printf("done\n");
	tower_of_hanoi(n,p,dp,splitter);

	printf("The minimum no of moves required is : %lld\n\n",dp[p][n]);
	printf("The complete memoized table is:(rows is number of available pegs >=3 & column is no of disks)\n");
	for (i=3;i<=p;++i)
	{
		for (j=1;j<=n;++j)
		{
		   // printf("a[%d][%d]:",i,j);
			printf("%lld ",dp[i][j]);
		}
		printf("\n\n");
	}



}
